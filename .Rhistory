setwd("~/RepData/PeerAsses1")
install.packages(scales)
install.packages(Hmisc)
install.packages('Hmisc')
install.packages('scales')
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
data <- read.csv('activity.csv')
data$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", data$interval), format='%H:%M')
glimpse(data)
library(dplyr)
glimpse(data)
averageValues<- aggregate(x=list(meanSteps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
aggregate(x=list(meanSteps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
activityData <- read.csv('activity.csv')
activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
data <- read.csv('activity.csv')
data$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", data$interval), format='%H:%M')
totalSteps <- tapply(data$steps, data$date, sum, na.rm=TRUE)
```{r}
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
stepsByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
stepsByDayMean <- mean(stepsByDay)
stepsByDayMedian <- median(stepsByDay)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
averageValues<- aggregate(x=list(meanSteps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
averageValues[which.max(averageValues$steps),]
averageValues<- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
avgSteps <- aggregate(noNA$steps, list(interval = as.numeric(as.character(noNA$interval))), FUN = "mean")
averageValues<- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN="mean", na.rm=TRUE)
mostSteps<-averageValues[which.max(averageValues$steps),]
intSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageValues[mostSteps,'interval'])
mostSteps<-averageValues[which.max(averageValues$steps),]
intSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageValues[mostSteps,'interval'])
missingValues <- length(which(is.na(data$steps)))
noNAdata <- data
noNAdata$steps <- impute(data$steps, fun=mean)
library(scales)
noNAdata <- data
noNAdata$steps <- impute(data$steps, fun=mean)
library(Hmisc)
noNAdata$steps <- impute(data$steps, fun=mean)
head(noNAdata)
totalStepsNoNA <- tapply(noNAdata$steps, noNAdata$date, sum)
qplot(totalStepsNoNA, xlab='Total steps per day - no NA values', ylab='Count', binwidth=700)
## Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Make a panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, "mean")
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, FUN="mean")
averages[which.max(averages$steps),]
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
totalStepsNoNAmean <- mean(totalStepsNoNA)
totalStepsNoNAmedian <- median(totalStepsNoNA)
totalStepsNoNA <- tapply(noNAdata$steps, noNAdata$date, sum)
qplot(totalStepsNoNA, xlab='Total steps per day - no NA values', ylab='Count', binwidth=700)
totalStepsNoNA$dayType <-  ifelse(as.POSIXlt(totalStepsNoNA$date)$wday %in% c(0,6), 'weekend', 'weekday')
dayType <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
noNAdata$date <- as.Date(noNAdata$date)
noNAdata$day <- sapply(noNAdata$date, FUN=dayType)
avg <- aggregate(steps ~ interval + day, data=noNAdata, mean)
ggplot(avg, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Average number of steps")
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
avg <- aggregate(steps ~ interval + day, data=noNAdata, mean)
avg <- aggregate(steps ~ interval + day, data=noNAdata, FUN="mean")
ggplot(avg, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Average number of steps")
setwd("~/GitHub/RepData_PeerAssessment1")
